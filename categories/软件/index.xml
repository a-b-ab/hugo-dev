<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>软件 on 乌鸦</title>
        <link>https://a-b-ab.github.io/hugo-dev/categories/%E8%BD%AF%E4%BB%B6/</link>
        <description>Recent content in 软件 on 乌鸦</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>乌鸦</copyright>
        <lastBuildDate>Fri, 26 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://a-b-ab.github.io/hugo-dev/categories/%E8%BD%AF%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Nginx笔记</title>
        <link>https://a-b-ab.github.io/hugo-dev/p/nginx%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Fri, 26 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>https://a-b-ab.github.io/hugo-dev/p/nginx%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;img src="https://a-b-ab.github.io/hugo-dev/p/nginx%E7%AC%94%E8%AE%B0/f48d72dbe89cb374fafa2450e23b0dc409e89c86.jpg" alt="Featured image of post Nginx笔记" /&gt;&lt;h1 id=&#34;nginx&#34;&gt;Nginx
&lt;/h1&gt;&lt;p&gt;Nginx（发音为“engine X”）是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP代理服务器。它因其稳定性、丰富的功能集、简单的配置以及低资源消耗而广受欢迎。Nginx 的主要作用包括但不限于以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Web服务器&lt;/strong&gt;：Nginx可以作为静态网页的服务器，直接处理并返回用户请求的静态文件（如HTML、CSS、JavaScript、图片等）。由于Nginx对静态文件的处理非常高效，因此它非常适合作为静态资源的服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;反向代理服务器&lt;/strong&gt;：Nginx最常用的功能之一是作为反向代理服务器。反向代理服务器接收来自客户端的请求，然后将这些请求转发给后端服务器（如Apache、Tomcat等），并将从后端服务器得到的响应返回给客户端。这种方式可以隐藏后端服务器的IP地址，增强安全性，同时实现负载均衡，将请求分发到多个后端服务器上，提高网站的并发处理能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;负载均衡器&lt;/strong&gt;：Nginx支持多种负载均衡算法（如轮询、最少连接、IP哈希等），可以根据后端服务器的负载情况、响应时间等因素，智能地将请求分发到不同的服务器上，以实现资源的合理利用和负载均衡。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTTP缓存&lt;/strong&gt;：Nginx支持HTTP缓存，可以缓存静态内容，减少服务器的请求处理次数和响应时间，提高网站的访问速度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;支持SSL/TLS协议&lt;/strong&gt;：Nginx支持SSL/TLS协议，可以提供安全的HTTPS服务，保护用户数据在传输过程中的安全。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块化设计&lt;/strong&gt;：Nginx采用模块化设计，具有高度的可扩展性。用户可以根据需要安装不同的模块，以实现特定的功能，如HTTP/2支持、WebSocket支持、邮件代理服务等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高并发处理能力&lt;/strong&gt;：Nginx采用异步非阻塞的事件驱动模型，能够处理大量的并发连接，非常适合作为高并发网站的服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源消耗低&lt;/strong&gt;：Nginx在资源消耗方面表现优秀，即使在处理大量并发连接时，也能保持较低的CPU和内存使用率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上所述，Nginx因其高性能、稳定性、丰富的功能集和易用性，在Web服务器、反向代理、负载均衡、HTTP缓存等方面发挥着重要作用，是现代互联网架构中不可或缺的一部分。&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;nginx 有一个&lt;strong&gt;主进程（Master）&lt;strong&gt;和几个&lt;/strong&gt;工作进程（Worker）&lt;/strong&gt;。主进程的主要目的是读取和评估配置，并维护工作进程。工作进程对请求进行处理。nginx 采用了基于事件模型和依赖于操作系统的机制来有效地在工作进程之间分配请求。工作进程的数量可在配置文件中定义，并且可以针对给定的配置进行修改，或者自动调整到可用 CPU 内核的数量&lt;/p&gt;
&lt;p&gt;&lt;em&gt;配置文件决定了 nginx 及其模块的工作方式。默认情况下，配置文件名为 nginx.conf，并放在目录 /usr/local/nginx/conf，/etc/nginx 或 /usr/local/etc/nginx 中。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;启动停止和重新加载配置&#34;&gt;启动，停止和重新加载配置
&lt;/h2&gt;&lt;p&gt;要启动 nginx，需要运行可执行文件。nginx 启动之后，可以通过调用可执行文件附带 -s 参数 来控制它。 使用以下语法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nginx -s 信号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;信号可能是以下之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;stop - 立即关闭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;quit - 正常关闭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reload - 重新加载配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reopen - 重新打开日志文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，要等待工作进程处理完当前的请求才停止 nginx 进程，可以执行以下命令：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nginx -s quit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;这个命令的执行用户应该是与启动nginx用户是一致的&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在将重新加载配置的命令发送到 nginx 或重新启动之前，配置文件所做的内容更改将不会生效。要重新加载配置，请执行：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nginx -s reload&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一旦主进程（Master）收到要重新加载配置（reload）的信号，它将检查新配置文件的语法有效性，并尝试应用其中提供的配置。如果成功，主进程将启动新的工作进程（Worker），并向旧工作进程发送消息，请求它们关闭。否则，主进程回滚更改，并继续使用旧配置。旧工作进程接收到关闭命令后，停止接受新的请求连接，并继续维护当前请求，直到这些请求都被处理完成之后，旧工作进程将退出&lt;/p&gt;
&lt;p&gt;可以借助 Unix 工具（如 kill 工具）将信号发送到 nginx 进程，信号直接发送到指定进程 ID 的进程。默认情况下，nginx 主进程的进程 ID 是写入在 /usr/local/nginx/logs 或 /var/run 中的 nginx.pid 文件中。例如，如果主进程 ID 为 1628，则发送 QUIT 信号让 nginx 正常平滑关闭，可执行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kill -s QUIT 1628&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取所有正在运行的 nginx 进程列表，可以使用 ps 命令，如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ps -ax | grep nginx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;配置文件结构&#34;&gt;配置文件结构
&lt;/h2&gt;&lt;p&gt;nginx 是由配置文件中指定的指令控制模块组成。指令可分为简单指令和块指令。一个简单的指令是由空格分隔的名称和参数组成，并以分号 ; 结尾。块指令具有与简单指令相同的结构，但不是以分号结尾，而是以大括号{}包围的一组附加指令结尾。如果块指令的大括号内部可以有其它指令，则称这个块指令为上下文（例如：events，http，server 和 location）。&lt;/p&gt;
&lt;p&gt;配置文件中被放置在任何上下文之外的指令都被认为是主上下文 main。events 和 http 指令在主 main 上下文中，server 在 http 中，location 又在 server 中。&lt;/p&gt;
&lt;p&gt;井号 # 之后的行的内容被视为注释。&lt;/p&gt;
&lt;h2 id=&#34;提供静态内容服务&#34;&gt;提供静态内容服务
&lt;/h2&gt;&lt;p&gt;Web 服务器的一个重要任务是提供文件（比如图片或者静态 HTML 页面）服务。您将实现一个示例，根据请求，将提供来自不同的本地目录的文件： /data/www（可能包含 HTML 文件）和 /data/images（包含图片）。这需要编辑配置文件，在 http 中配置一个包含两个 location 块的 server 块指令。&lt;/p&gt;
&lt;p&gt;首先，创建 /data/www 目录将包含任何文本内容的 index.html 文件放入其中，创建 /data/images 目录然后放一些图片进去。&lt;/p&gt;
&lt;p&gt;其次，打开这个配置文件， 默认配置文件已经包含几个服务器块示例，大部分是已经注释掉的。现在注释掉这些块并且启动一个新的 server 块。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http {
    server {
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通常，配置文件可以包含几个由监听 listen 端口和服务器域名 server names 区分的 server 块指令 distinguished。一旦 nginx 决定由哪个 server 来处理请求，它会根据 server 块中定义的 location 指令的参数来检验请求头中指定的URI&lt;/p&gt;
&lt;p&gt;添加如下 location 块指令到 server 块指令中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location / {
    root /data/www;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该 location 块指令指定 / 前缀与请求中的 URI 相比较。对于匹配的请求，URI 将被添加到根指令 root 中指定的路径，即 /data/ www，以形成本地文件系统上所请求文件的路径。如果有几个匹配上的 location 块指令，nginx 将选择具有最长前缀的 location 块。上面的位置块提供最短的前缀，长度为 1，因此只有当所有其它 location 块不能匹配时，才会使用该块。&lt;/p&gt;
&lt;p&gt;接下来，添加第二个 location 指令快：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location /images/ {
    root /data;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以 /images/ 为开头的请求将会被匹配上（虽然 location / 也能匹配上此请求，但是它的前缀更短）&lt;/p&gt;
&lt;p&gt;最后，server 块指令应如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    location / {
        root /data/www;
    }

    location /images/ {
        root /data;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这已经是一个监听标准 80 端口并且可以在本地机器上通过 http://localhost/ 地址来访问的有效配置。响应以 /images/ 开头的URI请求，服务器将从 /data/images 目录发送文件。例如，响应http://localhost/images/example.png 请求，nginx 将发送 /data/images/example.png 文件。如果此文件不存在，nginx 将发送一个404错误响应。不以 / images/ 开头的 URI 的请求将映射到 /data/www 目录。例如，响应 http://localhost/some/example.html 请求，nginx 将发送 /data/www/some/example.html 文件。&lt;/p&gt;
&lt;p&gt;如果运行的效果没有在预期之中，您可以尝试从 /usr/local/nginx/logs 或 /var/log/ nginx 中的 access.log 和 error.log 日志文件中查找原因。&lt;/p&gt;
&lt;h2 id=&#34;设置一个简单的代理服务器&#34;&gt;设置一个简单的代理服务器
&lt;/h2&gt;&lt;p&gt;nginx 的一个常见用途是作为一个代理服务器，作用是接收请求并转发给被代理的服务器，从中取得响应，并将其发送回客户端。&lt;/p&gt;
&lt;p&gt;我们将配置一个基本的代理服务器，它为图片请求提供的文件来自本地目录，并将所有其它请求发送给代理的服务器。在此示例中，两个服务器在单个 nginx 实例上定义。&lt;/p&gt;
&lt;p&gt;首先，通过向 nginx 的配置文件添加一个 server 块来定义代理服务器，其中包含以下内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 8080;
    root /data/up1;

    location / {
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是一个监听 8080 端口的简单服务器（以前，由于使用了标准 80 端口，所以没有指定 listen 指令），并将所有请求映射到本地文件系统上的 /data/up1 目录。创建此目录并将 index.html 文件放入其中。请注意，root 指令位于 server 上下文中。当选择用于处理请求的 location 块自身不包含 root 指令时，将使用此 root 指令。&lt;/p&gt;
&lt;p&gt;接下来，在上一节中的服务器配置基础上进行修改，使其成为代理服务器配置。在第一个 location 块中，使用参数指定的代理服务器的协议，域名和端口（在本例中为 http://localhost:8080）放置在 proxy_pass 指令处：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    location / {
        proxy_pass http://localhost:8080;
    }

    location /images/ {
        root /data;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们将修改使用了 /images/ 前缀将请求映射到 /data/images 目录下的文件的第二个 location 块，使其与附带常见的图片文件扩展名的请求相匹配。修改后的 location 块如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location ~ \.(gif|jpg|png)$ {
    root /data/images;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该参数是一个正则表达式，匹配所有以.gif，.jpg 或 .png 结尾的 URI。正则表达式之前应该是 ~。相应的请求将映射到 /data/images 目录。&lt;/p&gt;
&lt;p&gt;当 nginx 选择一个 location 块来提供请求时，它首先检查指定前缀的 location 指令，记住具有最长前缀的 location，然后检查正则表达式。如果与正则表达式匹配，nginx 会选择此 location，否则选择更早之前记住的那一个。&lt;/p&gt;
&lt;p&gt;代理服务器的最终配置如下：&lt;/p&gt;
&lt;p&gt;server {
location / {
proxy_pass http://localhost:8080/;
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location ~ \.(gif|jpg|png)$ {
    root /data/images;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;此 server 将过滤以 .gif，.jpg 或 .png 结尾的请求，并将它们映射到 /data/images 目录（通过向 root 指令的参数添加 URI），并将所有其它请求传递到上面配置的代理服务器。&lt;/p&gt;
&lt;h2 id=&#34;设置fastcgi代理&#34;&gt;设置FastCGI代理
&lt;/h2&gt;&lt;p&gt;nginx 可被用于将请求路由到运行了使用各种框架和 PHP 等编程语言构建的应用程序的 FastCGI 服务器。&lt;/p&gt;
&lt;p&gt;与 FastCGI 服务器协同工作的最基本的 nginx 配置是使用 fastcgi_pass 指令而不是 proxy_pass 指令，以及 fastcgi_param 指令来设置传递给 FastCGI 服务器的参数。假设 FastCGI 服务器可以在 localhost:9000 上访问。以上一节的代理配置为基础，用 fastcgi_pass 指令替换 proxy_pass 指令，并将参数更改为 localhost:9000。在 PHP 中，SCRIPT_FILENAME 参数用于确定脚本名称，QUERY_STRING 参数用于传递请求参数。最终的配置将是：&lt;/p&gt;
&lt;p&gt;server {
location / {
fastcgi_pass  localhost:9000;
fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
fastcgi_param QUERY_STRING    $query_string;
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location ~ \.(gif|jpg|png)$ {
    root /data/images;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;这里设置一个 server，将除了静态图片请求之外的所有请求路由到通过 FastCGI 协议在 localhost:9000 上运行的代理服务器。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
