[{"content":"前言 相信大家遇到过掉网卡驱动的情况，情况就是网络选项都没有了，WIFI图标都没有了\n救急 既然网络选项没有了，那我们要是急需上网怎么办，可以用数据线连接手机和笔记本,在手机设置里打开个人热点，打开USB共享这样你的笔记本就可以上网了。不过这个方法只适合临时，毕竟每次这样很麻烦。\n重启大法： 无脑重启，偶尔可以解决问题。 重启大法好啊！！！\n驱动重启或重装 打开设备管理器,查看网络设配器，图中我选中的就是无线网卡驱动，如果有个黄色感叹号就是驱动没有正常运行。 右键对应的驱动 可以先更新驱动程序试试 或者直接禁用设备，然后启用设备 如果都不行卸载设备 然后去对应电脑官网下载一个对应的无线网卡驱动 然后重启 注册表 键盘按win+r，弹出运行窗口 输入“redegit”，进入注册表， 删除HKEY_CLASSES_ROOT\\CLSID{3d09c1ca-2bcc-40b7-b9bb-3f3ec143a87b}，然后网卡禁用再启用。 硬件问题 掉网卡有多种可能，有可能是一些其他驱动冲突。有时出现掉网卡的状况可能是因为温度过高，硬件的自我保护机制，强制停止运行。这种情况很有可能是我们的散热系统里面进了灰尘，导致散热系统不能完全发挥性能。也有可能是网卡实体位置不对等等。。。\n如果出现这些问题去线下店看看喽\n","date":"2024-10-16T00:00:00Z","image":"https://a-b-ab.github.io/hugo-dev/p/%E8%81%94%E6%83%B3%E6%8E%89%E7%BD%91%E5%8D%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/3168604b7ecc090e38e308737e9e2427_hu4565555821577788711.jpg","permalink":"https://a-b-ab.github.io/hugo-dev/p/%E8%81%94%E6%83%B3%E6%8E%89%E7%BD%91%E5%8D%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","title":"联想掉网卡解决方案"},{"content":"MySQL基本操作命令汇总 基本操作 对数据库以及表的一些基本操作\n关于数据库 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // 创建数据库 create database h_test; // 查看数据库 show databases; //查看数据库信息 show create database h_test; //修改数据库的编码，可使用上一条语句查看是否修改成功 alter database h_test default character set gbk collate gbk_bin; //删除数据库 drop database h_test; //综上，可以直接创建数据库且设置编码方式 create database h_test default character set utf8 collate utf_general_ci; 关于数据表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 //首先选定操作的数据库 use h_test; //create table student( id int(11), name varchar(20), age int(11) ); //查看数据表 show tables; //查看数据表信息，后面加上参数/G可使结果更加美观 show create table student; //查看表的字段信息 desc student; //修改表名 alter table student rename [to] h_student; //修改字段名 alter table h_student change name stu_name varchar(20); //修改字段的数据类型 alter table h_sutdent modify id int(20); //添加字段 alter table h_student add grade float; //删除字段 alter table h_student drop grade; //修改字段的位置 alter table h_student modify stu_name varchar(20) first; alter table h_student modify id int(11) after age; //删除数据表 drop table h_student;S 表的约束 PRIMARY KEY 主键约束，用于唯一标识对应的记录 FOREIGN KEY 外键约束 NOT NULL 非空约束 UNIQUE 唯一性约束 DEFAULT 默认值约束，用于设置字段的默认值\n索引 作用：提高表中数据的查询速度\n普通索引 唯一性索引 全文索引 单列索引 多列索引 空间索引 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 //创建索引 //一.创建表的时候创建索引 create table 表名( 字段名 数据类型[完整性约束条件], ... 字段名 数据类型, [UNIQUE|FULLTEXT|SPATIAL] INDEX|KEY ); //1-1.创建普通索引 create table test1( id INT, name VARCHAR(20), age INT, INDEX (id) ); //可以插入一条数据,查看索引是否被使用 explain select * from test1 where id=1 \\G; //1-2.创建唯一性索引 create table test2( id INT, name VARCHAR(20), age INT, UNIQUE INDEX unique_id(id asc) ); //1-3.创建全文索引 create table test3( id INT, name VARCHAR(20), age INT, FULLTEXT INDEX fulltext_name(name) )ENGINE=MyISAM; //1-4.创建单列索引 create table test4( id INT, name VARCHAR(20), age INT, INDEX single_name(name(20)) ); //1-5.创建多列索引 create table test5( id INT, name VARCHAR(20), age INT, INDEX multi(id,name(20)) ); //1-6.创建空间索引 create table test6( id INT, space GEOMETRY NOT NULL, SPATIAL INDEX sp(space) )ENGINE=MyISAM; --------------------------------------------------- //二.使用create index语句在已经存在的表上创建索引 //首先新建一个表,这个表没有索引 create table student( id int, age int, name varchar(20), intro varchar(40), g GEOMETRY NOT NULL )ENGINE=MyISAM; //2-1.创建普通索引 create index index_id on student(id); //2-2.创建唯一性索引 create unique index uniqueidx on student(id); //2-3.创建单列索引 create index singleidx on student(age); //2-4.创建多列索引 create index mulitidx on student(name(20),intro(40)); //2-5.创建全文索引 create fulltext index fulltextidx on student(name); //2-6.创建空间索引 create spatial index spatidx on student(g); //下图是第二种方法创建索引演示后的所有索引 //三.使用alter table语句在已经存在的表上创建索引 //删除student表，重新创建 drop table student; create table student( id int, age int, name varchar(20), intro varchar(40), space GEOMETRY NOT NULL )ENGINE=MyISAM; //3-1.创建普通索引 alter table student add index index_id(id); //3-2.创建唯一性索引 alter table student add unique uniqueidx(id); //3-3.创建单列索引 alter table student add index singleidx (age); //3-4.创建多列索引 alter table student add index multidx(name(20),intro(40)); //3-5.创建全文索引 alter table student add fulltext index fulltextidx(name); //3-6.创建空间索引 alter table student add spatial index spatidx(space); //删除索引，有下面两种方式 //1.使用alter table删除索引fulltextidx alter table student drop index fulltextidx; //2.使用drop index删除索引spatidx drop index spatidx on student; //下图可看到删除成功 添加数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 //重新建立表student drop table student; create table student( id int, name varchar(20) not null, grade float ); //插入一条数据，也可以少某个字段的同时也少对应的数据 insert into student(id,name,grade) values(1,\u0026#39;CROW\u0026#39;,70); //也可以不指定字段名，但要注意顺序 insert into student values(2,\u0026#39;CROW\u0026#39;,80); //也可以这样添加数据 insert into student set id=3,name=\u0026#34;CROW\u0026#34;,grade=90; //同时添加多条数据 insert into student values (4,\u0026#39;CROW\u0026#39;,80), (5,\u0026#39;CROW\u0026#39;,80), (6,\u0026#39;CROW\u0026#39;,80); 更新数据 1 2 3 4 //更新id=1的数据 update student set name=\u0026#34;abab\u0026#34;,grade=60 where id=1; //批量更新，如果没有where子句，会更新表中所有对应数据 update student set grade=100 where id\u0026lt;4; 删除数据 1 2 3 4 5 6 //删除id=6的数据 delete from student where id=6; //批量删除数据 delete from student where id\u0026gt;3; //删除所有数据,DDL(数据定义语言)语句 truncate table student也可以删除表内所有数据 delete from student; 单表查询和多表操作 单表查询：如何从数据库中获取你需要的数据 多表查询：实际开发中，需要进行2张表以上进行操作\n单表查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 //建立表student create table student( id int not null auto_increment, name varchar(20) not null, grade float, primary key(id) ); //插入数据 insert into student (name,grade) values (\u0026#34;Crow1\u0026#34;,40), (\u0026#34;Crow1\u0026#34;,50), (\u0026#34;Crow2\u0026#34;,50), (\u0026#34;Crow3\u0026#34;,60), (\u0026#34;Crow4\u0026#34;,70), (\u0026#34;Crow5\u0026#34;,80), (\u0026#34;Crow6\u0026#34;,null); //查询全部 select * from student; //查询某个字段 select name from student; //条件查询,查询id=2学生的信息 select * from student where id=2; //in关键字查询,也可以使用not in select * from student where id IN(1,2,3); //between and关键字查询 select * from student where id between 2 and 5; //空值(NULL)查询，使用IS NULL来判断 select * from student where grade is null; //distinct关键字查询 select distinct name from student; //like关键字查询,查询以h开头，e结尾的数据 select * from student where name like \u0026#34;h%e\u0026#34;; //and关键字多条件查询,or关键字的使用也是类似 select * from student where id\u0026gt;5 and grade\u0026gt;60; 高级查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 //聚合函数 //count()函数,sum()函数,avg()函数,max()函数,min()函数 select count(*) from student; select sum(grade) from student; select avg(grade) from student; select max(grade) from student; select min(grade) from student; //对查询结果进行排序 select * from student order by grade; //分组查询 //1.单独使用group by分组 select * from student group by grade; //2.和聚合函数一起使用 select count(*),grade from student group by grade; //3.和having关键字一起使用 select sum(grade),name from student group by grade having sum(grade) \u0026gt;100; //使用limit限制查询结果的数量 select * from student limit 5; select * from student limit 2,2; select * from student order by grade desc limit 2,2; //函数,mysql提供了许多函数 select concat(id,\u0026#39;:\u0026#39;,name,\u0026#39;:\u0026#39;,grade) from student; //为表取别名 select * from student as stu where stu.name=\u0026#34;CROW\u0026#34;; //为字段取别名,as关键字也可以不写 select name as stu_name,grade stu_grade from student; 多表操作 1.了解外键 2.了解关联关系 3.了解各种连接查询多表的数据 4.了解子查询，会使用各种关键字以及比较运算符查询多表中的数据\n外键 外键是指引用另一个表中的一列或者多列，被引用的列应该具有主键约束或者唯一性约束，用于建立和加强两个数据表之间的连接。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 //创建表class,student create table class( id int not null primary key, classname varchar(20) not null )ENGINE=InnoDB; create table student( stu_id int not null primary key, stu_name varchar(20) not null, cid int not null -- 表示班级id，它就是class表的外键 )ENGINE=InnoDB; //添加外键约束 alter table student add constraint FK_ID foreign key(cid) references class(id); //删除外键约束 alter table student drop foreign key FK_ID; 操作关联表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 //数据表有三种关联关系，多对一、多对多、一对一 //学生(student)和班级(class)是多对一关系，添加数据 //首选添加外键约束 alter table student add constraint FK_ID foreign key(cid) references class(id); //添加数据,这两个表便有了关联若插入中文在终端显示空白，可设置set names \u0026#39;gbk\u0026#39;; insert into class values(1,\u0026#34;软件一班\u0026#34;),(2,\u0026#34;软件二班\u0026#34;); insert into student values(1,\u0026#34;CROW\u0026#34;,1),(2,\u0026#34;Crow1\u0026#34;,2),(3,\u0026#34;Crow2\u0026#34;,1),(4,\u0026#34;Crow3\u0026#34;,2); //交叉连接 select * from student cross join class; //内连接，该功能也可以使用where语句实现 select student.stu_name,class.classname from student join class on class.id=student.cid; //外连接 //首先在student,class表中插入数据 insert into class values(3,\u0026#34;软件三班\u0026#34;); //左连接，右连接 select s.stu_id,s.stu_name,c.classname from student s left join class c on c.id=s.cid; select s.stu_id,s.stu_name,c.classname from student s right join class c on c.id=s.cid; //复合条件连接查询就是添加过滤条件 //子查询 //in关键字子查询跟上面的in关键字查询类似 select * from student where cid in(select id from class where id=2); //exists关键字查询,相当于测试，不产生数据，只返回true或者false，只有返回true，外层才会执行，具体看下图 select * from student where exists(select id from class where id=12); -- 外层不会执行 select * from student where exists(select id from class where id=1); -- 外层会执行 //any关键字查询 select * from student where cid\u0026gt;any(select id from class); //all关键字查询 select * from student where cid=all(select id from class); 事务于存储过程 事务的概念，会开启、提交和回滚事务 事务的四种隔离级别 创建存储过程 调用、查看、修改和删除存储过程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 start transaction; -- 开启事务 commit; -- 提交事务 rollback; -- 取消事务(回滚) //创建表account，插入数据 create table account( id int primary key auto_increment, name varchar(40), money float ); insert into account(name,money) values(\u0026#39;a\u0026#39;,1000),(\u0026#39;b\u0026#39;,2000),(\u0026#39;c\u0026#39;,3000); //利用事务实现转账功能，首先开启事务，然后执行语句，提交事务 start transaction; update account set money=money-100 where name=\u0026#39;a\u0026#39;; update account set money=money+100 where name=\u0026#39;b\u0026#39;; commit; //事务的提交，通过这个命令查看mysql提交方式 select @@autocommit; -- 若为1，表示自动提交，为0，就要手动提交 //若事务的提交方式为手动提交 set @@autocommit = 0; -- 设置为手动提交 start transaction; update account set money=money+100 where name=\u0026#39;a\u0026#39;; update account set money=money-100 where name=\u0026#39;b\u0026#39;; //现在执行select * from account 可以看到转账成功，若此时退出数据库重新登录，会看到各账户余额没有改变，所以一定要用commit语句提交事务，否则会失败 //事务的回滚，别忘记设置为手动提交的模式 start transaction; update account set money=money-100 where name=\u0026#39;a\u0026#39;; update account set money=money+100 where name=\u0026#39;b\u0026#39;; //若此时a不想转账给b，可以使用事务的回滚 rollback; //事务的隔离级别 read uncommitted; read committed; repeatable read; serializable; 存储过程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 //创建查看student表的存储过程 //创建student表 create table student( id int not null primary key auto_increment, name varchar(4), grade float )ENGINE=InnoDB default character set utf8; delimiter // -- 将mysql的结束符设置为// create procedure Proc() begin select * from student; end // delimiter ; -- 将mysql的结束符设置为; call Proc(); -- 这样就可以调用该存储过程 //变量的使用,mysql中变量不用事前申明，在用的时候直接用“@变量名”使用就可以 set @number=100; -- 或set @num:=1; //定义条件和处理程序 //光标的使用 //1.声明光标 DECLARE * cursor_name* CURSOR FOR select_statement 2. 光标OPEN语句 OPEN cursor_name 3. 光标FETCH语句 FETCH cursor_name INTO var_name [, var_name] ... 4. 光标CLOSE语句 CLOSE cursor_name //流程控制的使用 不做介绍 调用存储过程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //定义存储过程 delimiter // create procedure proc1(in name varchar(4),out num int) begin select count(*) into num from student where name=name; end// delimiter ; //调用存储过程 call proc1(\u0026#34;tom\u0026#34;,@num) -- 查找名为tom学生人数 //查看结果 select @num; //查看存储过程 show procedure status like \u0026#39;p%\u0026#39; \\G -- 获得以p开头的存储过程信息 //修改存储过程 alter {procedure|function} sp_name[characteristic...] //删除存储过程 drop procedure proc1; 视图 如何创建视图 查看、修改、更新、删除视图\n视图的基本操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 //在单表上创建视图,重新创建student表，插入数据 create table student( id int not null primary key auto_increment, name varchar(10) not null, math float, chinese float ); insert into student(name,math,chinese) values (\u0026#39;Crow1\u0026#39;,66,77), (\u0026#39;Crow2\u0026#39;,66,77), (\u0026#39;Crow3\u0026#39;,66,77); //开始创建视图 create view stu_view as select math,chinese,math+chinese from student; -- 下图可看出创建成功 //也可以创建自定义字段名称的视图 create view stu_view2(math,chin,sum) as select math,chinese,math+chinese from student; //在多表上创建视图，创建表stu_info，插入数据 create table stu_info( id int not null primary key auto_increment, class varchar(10) not null, addr varchar(100) ); insert into stu_info(class,addr) values (\u0026#39;1\u0026#39;,\u0026#39;anhui\u0026#39;), (\u0026#39;2\u0026#39;,\u0026#39;fujian\u0026#39;), (\u0026#39;3\u0026#39;,\u0026#39;guangdong\u0026#39;); //创建视图stu_class create view stu_class(id,name,class) as select student.id,student.name,stu_info.class from student,stu_info where student.id=stu_info.id; //查看视图 desc stu_class; show table status like \u0026#39;stu_class\u0026#39;\\G show create view stu_class\\G //修改视图 create or replace view stu_view as select * from student; alter view stu_view as select chinese from student; //更新视图 update stu_view set chinese=100; insert into student values(null,\u0026#39;haha\u0026#39;,100,100); delete from stu_view2 where math=100; //删除视图 drop view if exists stu_view2; ","date":"2024-03-22T00:00:00Z","image":"https://a-b-ab.github.io/hugo-dev/p/mysql%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/8c8b581ab1cf8ea5e3aa00cfb897ea4e_hu4213249906190306138.jpg","permalink":"https://a-b-ab.github.io/hugo-dev/p/mysql%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/","title":"MySQL简单命令"},{"content":"前言 在搭建个人博客时，遇到了各种阴间问题，为此我删了起码七个库，都是泪，归根到底就是两个问题，一是主题配置，二是远程连接\nhugo（静态网站生成器） Hugo是一个快速、灵活且功能强大的静态网站生成器。它使用Go语言开发，旨在帮助用户轻松创建和管理网站\nhugo中文文档\nhugo下载地址\n生成站点 使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\nwin+r输入cmd调用命令行\nhugo new site /path/to/site\n这样就在 /path/to/site 目录里生成了初始站点，进去目录：\ncd /path/to/site\n站点目录结构：\narchetypes/:存放内容模板的目录 content/:：存放所有内容文件（如Markdown文件）的目录。 layouts/:存放布局文件的目录。 static/:存放静态资源（如图片、CSS、JavaScript等）的目录 config.toml(yaml):站点的配置文件。 在这个目录下，最主要的是对hugo.toml，themes/的配置。创建的所有.md文件都放置在content/文件下，所有文章的图片都放在static/下面\n创建文章 创建一个 about 页面\nhugo new about.md\nabout.md 自动生成到了 content/about.md ，打开 about.md 看下 \u0026mdash; title: Chinese Test description: 这是一个副标题 date: 2020-09-09 slug: test-chinese image: 文章封面图片 categories: - Test - 测试 \u0026mdash;\ntitle: 页面或文章的标题，这里是 \u0026ldquo;Chinese Test\u0026rdquo;。 description: 页面或文章的描述，这里是 \u0026ldquo;这是一个副标题\u0026rdquo;。 date: 文章的发布日期，这里是 \u0026ldquo;2020-09-09\u0026rdquo;。 slug: 文章的URL别名，这里是 \u0026ldquo;test-chinese\u0026rdquo;。 image: 文章的封面图片，这里是 \u0026ldquo;helena-hertz-wWZzXlDpMog-unsplash.jpg\u0026rdquo;。 categories: 文章的分类，这里有两个分类：\u0026ldquo;Test\u0026rdquo; 和 \u0026ldquo;测试\u0026rdquo;。 draft:草稿，建议直接设为false 正文内容\n创建第一篇文章，放到 post 目录，方便之后生成聚合页面\nhugo new post/first.md\n安装皮肤 一个好看的主题是必要的，但是完全自己去写就太麻烦了，hugo中有很多精美的主题，比较方便的操作是在Hugo项目目录里面使用Git命令来克隆themes：你需要提供主题的 Git 仓库 URL。通常，主题的仓库 URL 可以在 Hugo Themes 官方网站或主题的文档中找到。\ngit clone https://github.com/author/theme-name.git themes/theme-name\n或者直接下载主题的压缩包，将其解压到themes/文件夹下，这样的话，就需要你对hugo.toml文件进行一点过的修改。\n每个主题文件里面都有对应的配置教程和演示网站，比如stack在exampleSite文件夹里面\n配置hugo.toml 好多教程里面直接就说会生成config.yaml文件，但事实上新版的都是生成的hugo.toml，这不免让第一次配置的人感到迷惑，这两种的使用都是可以的，只是在语法结构上会有区别(类似于c++和python)，如果你想要完全自己手搓，按照你喜欢的语言就好，如果像我一样，只想点点鼠标，那就主要观察你下载的themes里面它使用的是什么，跟着用就行。\n配置文件可以理解为对这个项目的总的配置，比如修改网站的标题等\n使用主题前最好看一下主题相应的配置教程，不同的主题是不一样，主题就是别人写好的网站的模板，而你就是去套用别人的模板。\ntheme = \u0026ldquo;my-theme\u0026rdquo; my-theme是你下载的theme的主题名，要和你解压的文件名一致\n配置还有很多，可以结合网上资源或自己专业知识定制自己的网站，类似：\n1 2 3 4 5 6 7 sidebar: emoji: 🍔 subtitle: 所行皆坦途,所愿皆如期 avatar: enabled: true local: true src: img/avatar.jpg 生成网站 需要注意的是，虽然我们做了这么多，但是在这个结构下(在 my-site这个结构下)，我们网站的页面实际上是还没有生成的，要想生成静态网站页面，必须运行如下命令\nhugo\n命令运行后，在上文提到my-site这个结构下会产生一个public/文件夹，里面保存生成的静态页面，后面将其在GitHub上面布置，实际上就是将public/中的内容远程推送到Github仓库中后进行展示。\nhugo server\n可以在本地预览你生成的网站，点击链接就可以在你本地的电脑看到自己搭建的网页的，但是这只是完成了一半，你需要将其托管到github page上，别人才能通过网址找到你的网站，github page是最简单且免费的方法，当然便宜的东西是有缺陷的，如果以后自己想深入，就需要买个域名和服务器了\n推送到GitHub 首先在GitHub上创建一个仓库，名字最好和你自己的名字一样，其实也无所谓，但是好多人都这么做，但我不是\n在pubilc文件夹中创建仓库 记得cd 进入对应的文件夹\n其实远程连接在我的git博客上有详细的教程，这里我大概说一下\ngit init 初始化仓库 git add. 增加所有修改的意思 git commit -m \u0026ldquo;备注\u0026rdquo; 提交到远程仓库“备注随便写，你写我是傻逼都行”\n将两个仓库链接起来 这一步是最恶心我的，不知道为什么，不能用http链接，只能用ssh链接 大概意思就是你需要在你的电脑生成一个ssh链接，然后将其放到GitHub的配置上\n这步是参考别人的\n打开git bash命令窗口 生成ssh key ssh-keygen -t rsa -b 4096 -C \u0026ldquo;your_email@example.com\u0026rdquo; your_email@example.com为github上你注册的email地址。\n然后直接三个enter不管他\n上面默认生成在用户主目录的.ssh目录下，可以自己输入自定义位置\n把ssh key添加到github 复制文件c/Users/Administrator/.ssh/id_rsa.pub内容，把key添加到：github \u0026gt; settings \u0026gt; SSH and GPG keys \u0026gt; New SSH key \u0026gt; 粘贴保存。\n测试SSH连接 ssh -T git@github.com\n如果成功的话你就可以通过SSH方式来clone及提交代码了\ngit branch -M main // 创建一个分支\ngit remote add origin https://github.com/your-username/your-repo.git //使用 git remote add 命令将远程仓库添加到仓库配置中\ngit remote set-url origin git@github.com:your-username/your-repo.git //使用 SSH 连接后，可以使用 SSH URL 推送到 GitHub 仓库\ngit push -u origin main //推送文件\n后续提交 hugo //在站点中运行\ncd public/\ngit add . //提交文件\ngit commit -m \u0026ldquo;备注\u0026rdquo; //推送到远程：在ssh已连接的情况下\ngit push -u origin main\n","date":"2024-03-20T00:00:00Z","image":"https://a-b-ab.github.io/hugo-dev/p/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1636c128aa9d846a9aa395599c438a041d4f56b41dff52-PmgBaF_hu14021243640980924465.jpg","permalink":"https://a-b-ab.github.io/hugo-dev/p/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","title":"个人博客搭建"}]